<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/26/-%20jwt%20%E5%92%8C%20session%20%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88/"/>
    <url>/2021/02/26/-%20jwt%20%E5%92%8C%20session%20%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="jwt认证方案"><a href="#jwt认证方案" class="headerlink" title="jwt认证方案"></a>jwt认证方案</h1><p><img src="..%5Cimg%5C01.png"></p><p>服务器在多用户情况下需要给用户进行区分，所以对每个用户需要标记，同时在为了客户安全需要加密处理</p><h2 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h2><p><img src="..%5Cimg%5C02.png"></p><ol><li>先引入需要的第三方包，以及创建实例对象</li></ol><p>需要下载的包express，jsonwebtoken，express-jtw</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">const</span> <span class="hljs-variable">express</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)</span><br><span class="hljs-variable">const</span> <span class="hljs-variable">app</span> = <span class="hljs-function"><span class="hljs-title">express</span>()</span><br><span class="hljs-variable">const</span> <span class="hljs-variable">jwt</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="hljs-variable">const</span> <span class="hljs-variable">jwtParser</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&#x27;express-jtw&#x27;</span>)</span><br></code></pre></td></tr></table></figure><ol start="2"><li>解决跨域资源共享问题</li></ol><p>直接使用cros封装好的方法（ps：cros也是第三方包，需要下载）</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">const</span> <span class="hljs-variable">cors</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>)</span><br><span class="hljs-variable">app.use</span>(<span class="hljs-function"><span class="hljs-title">cors</span>())</span><br></code></pre></td></tr></table></figure><ol start="3"><li>解析post表单数据的中间件</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br>app.<span class="hljs-keyword">use</span>(bodyParser.urlencoded(&#123; extended: <span class="hljs-literal">false</span> &#125;))<br></code></pre></td></tr></table></figure><ol start="4"><li>定义 secret 密钥</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> secretKey = <span class="hljs-string">&#x27;字符串&#x27;</span><br>字符串可以自己定义<br></code></pre></td></tr></table></figure><ol start="5"><li>还原jwt字符串</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.use</span>(<span class="hljs-selector-tag">expressJWT</span>(&#123; <span class="hljs-attribute">secret</span>: secretKey &#125;)<span class="hljs-selector-class">.unless</span>(&#123; <span class="hljs-attribute">path</span>: [/^\/api\//] &#125;))<br></code></pre></td></tr></table></figure><ol start="6"><li>正常登录接口</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.post(<span class="hljs-string">&#x27;/api/login&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>    <span class="hljs-comment">// 将 req.body 请求体中的数据，转存为 userinfo 常量</span><br>    <span class="hljs-keyword">const</span> userinfo = req.body<br>        <span class="hljs-comment">// 登录失败</span><br>    <span class="hljs-keyword">if</span> (userinfo.username !== <span class="hljs-string">&#x27;admin&#x27;</span> || userinfo.password !== <span class="hljs-string">&#x27;000000&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> res.send(&#123;<br>            status: <span class="hljs-number">400</span>,<br>            message: <span class="hljs-string">&#x27;登录失败！&#x27;</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 登录成功</span><br>    <span class="hljs-comment">// TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端</span><br><br>&#125;)<br><br></code></pre></td></tr></table></figure><ol start="7"><li>设置一个有权限的api接口</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;/admin/getinfo&#x27;</span>, function(req, res) &#123;<br>    <span class="hljs-comment">// TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span><br>    <span class="hljs-selector-tag">res</span><span class="hljs-selector-class">.send</span>(&#123;<br>        <span class="hljs-attribute">status</span>: <span class="hljs-number">200</span>,<br>        <span class="hljs-attribute">message</span>: <span class="hljs-string">&#x27;获取用户信息成功！&#x27;</span>,<br>        <span class="hljs-attribute">data</span>: &#123;&#125; <span class="hljs-comment">// 要发送给客户端的用户信息</span><br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="8"><li>启动服务器</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;/admin/getinfo&#x27;</span>, function(req, res) &#123;<br>    <span class="hljs-comment">// TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span><br>    <span class="hljs-selector-tag">res</span><span class="hljs-selector-class">.send</span>(&#123;<br>        <span class="hljs-attribute">status</span>: <span class="hljs-number">200</span>,<br>        <span class="hljs-attribute">message</span>: <span class="hljs-string">&#x27;获取用户信息成功！&#x27;</span>,<br>        <span class="hljs-attribute">data</span>: &#123;&#125; <span class="hljs-comment">// 要发送给客户端的用户信息</span><br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="Session认证方案"><a href="#Session认证方案" class="headerlink" title="Session认证方案"></a>Session认证方案</h1><p><img src="..%5Cimg%5C03.png"></p><h2 id="代码思路-1"><a href="#代码思路-1" class="headerlink" title="代码思路"></a>代码思路</h2><ol><li>引入包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入 express 模块</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br>    <span class="hljs-comment">// 创建 express 的服务器实例</span><br><span class="hljs-keyword">const</span> app = express()<br></code></pre></td></tr></table></figure><ol start="2"><li>配置 Session 中间件</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">const</span> session = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br>app.<span class="hljs-keyword">use</span>(<br>    session(&#123;<br>        secret: <span class="hljs-string">&#x27;itheima&#x27;</span>,<br>        resave: <span class="hljs-literal">false</span>,<br>        saveUninitialized: <span class="hljs-literal">true</span>,<br>    &#125;)<br>)<br></code></pre></td></tr></table></figure><ol start="3"><li>解析中间件</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">app.<span class="hljs-keyword">use</span>(express.<span class="hljs-built_in">static</span>(<span class="hljs-string">&#x27;./pages&#x27;</span>))<br>app.<span class="hljs-keyword">use</span>(express.urlencoded(&#123; extended: <span class="hljs-literal">false</span> &#125;))<br></code></pre></td></tr></table></figure><ol start="4"><li>验证登录接口</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim">app.post(<span class="hljs-string">&#x27;/api/login&#x27;</span>, (req, <span class="hljs-keyword">res</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (req.body.username !== <span class="hljs-string">&#x27;admin&#x27;</span> || req.body.password !== <span class="hljs-string">&#x27;000000&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">res</span>.send(&#123; statu<span class="hljs-variable">s:</span> <span class="hljs-number">1</span>, ms<span class="hljs-variable">g:</span> <span class="hljs-string">&#x27;登录失败&#x27;</span> &#125;)<br>    &#125;<br><br>    req.session.user = req.body<br>    req.session.islogin = true<br><br>    <span class="hljs-keyword">res</span>.send(&#123; statu<span class="hljs-variable">s:</span> <span class="hljs-number">0</span>, ms<span class="hljs-variable">g:</span> <span class="hljs-string">&#x27;登录成功&#x27;</span> &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="5"><li>获取用户姓名</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim">app.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;/api/username&#x27;</span>, (req, <span class="hljs-keyword">res</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!req.session.islogin) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">res</span>.send(&#123; statu<span class="hljs-variable">s:</span> <span class="hljs-number">1</span>, ms<span class="hljs-variable">g:</span> <span class="hljs-string">&#x27;fail&#x27;</span> &#125;)<br>    &#125;<br>    <span class="hljs-keyword">res</span>.send(&#123;<br>        statu<span class="hljs-variable">s:</span> <span class="hljs-number">0</span>,<br>        ms<span class="hljs-variable">g:</span> <span class="hljs-string">&#x27;success&#x27;</span>,<br>        username: req.session.user.username,<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="6"><li>退出登录的接口清空 Session 信息</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.post</span>(<span class="hljs-string">&#x27;/api/logout&#x27;</span>, (req, res) =&gt; &#123;<br>    <span class="hljs-selector-tag">req</span><span class="hljs-selector-class">.session</span><span class="hljs-selector-class">.destroy</span>()<br>    <span class="hljs-selector-tag">res</span><span class="hljs-selector-class">.send</span>(&#123;<br>        <span class="hljs-attribute">status</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attribute">msg</span>: <span class="hljs-string">&#x27;退出登录成功&#x27;</span>,<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="7"><li>启动web服务器</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.listen(<span class="hljs-number">80</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Express server running at http://127.0.0.1:80&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/24/sql%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/24/sql%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><ul><li>从指定表中查出所有列的数据</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名称<br></code></pre></td></tr></table></figure><ul><li>从指定表中查出指定列的数据</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> 列名称<span class="hljs-keyword">from</span> 表名称<br></code></pre></td></tr></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><ul><li>向指定的数据表中插入一条数</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">inster</span> into 表名称(列<span class="hljs-number">1</span>, 列<span class="hljs-number">2</span>, ...) values(值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...)<br></code></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><ul><li> 更新数据表中的某一列或多列数据</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">update 表名称 <span class="hljs-builtin-name">set</span> 列<span class="hljs-attribute">1</span>=值1, 列<span class="hljs-attribute">2</span>=值2 where 列名称=值;<br></code></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><ul><li>删除数据表中的某一行或多行数据</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名称 <span class="hljs-keyword">where</span> 列名称=值<br></code></pre></td></tr></table></figure><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名称 <span class="hljs-keyword">where</span> 列名称 运算符 值<br></code></pre></td></tr></table></figure><p>常见的运算符号</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span>&gt; 和 &gt;= <br><span class="hljs-number">2.</span>&lt; 和 &lt;=<br><span class="hljs-number">3.</span>!= 或 &lt;&gt;<br><span class="hljs-number">4.</span>=<br><span class="hljs-number">5.</span><span class="hljs-keyword">between</span><br><span class="hljs-number">6.</span><span class="hljs-keyword">like</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/22/%E6%A8%A1%E5%9D%97%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/22/%E6%A8%A1%E5%9D%97%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="模块缓存机制"><a href="#模块缓存机制" class="headerlink" title="模块缓存机制"></a>模块缓存机制</h2><p>模块加载一次之后会被缓存，每次调用同一模块之后都解析到同一文件，返回的是相同结果，不会导致模块代码呗多次执行</p><h2 id="核心模块的加载机制"><a href="#核心模块的加载机制" class="headerlink" title="核心模块的加载机制"></a>核心模块的加载机制</h2><p>require()会优先加载核心模块</p><h2 id="自定义模块的加载机制"><a href="#自定义模块的加载机制" class="headerlink" title="自定义模块的加载机制"></a>自定义模块的加载机制</h2><ul><li><p>使用 require() 方法去加载自定义模块必须有路径标示，否则会被当做核心模块去加载</p></li><li><p>require()模块不加后缀名称的话会按照文件名+(.js、 .json  .node) 的顺序依次添加之后重新加载</p></li><li><p>  当传递一个目录标识符给 require () 方法时, 加载的顺序先在加载的目录下查找 package.json 的文件, 并寻找 main 属性作为 require 的入口，如果找不到,  Node.js 将会试图加载目录下的 文件名+.js 或 文件名+.node 文件</p></li></ul><h2 id="第三方模块的加载机制"><a href="#第三方模块的加载机制" class="headerlink" title="第三方模块的加载机制"></a>第三方模块的加载机制</h2><ul><li>如果传递给 require() 的模块标识符不是一个核心模块，也没有以 路径开头，那么 Node.js 会从当前模块的父目录开始，尝试从它的 /node_modules 目录里加载模块果还是没有找到，则移动到再上一层父目录，直到文件系统的根目录。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/22/npm%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/22/npm%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<ul><li><p>查看在自己电脑本机的 npm ：<br>npm -v</p></li><li><p>下载一个指定的包<br>npm i 包的具体名称</p></li><li><p>查看一个指定包<br>npm view 包的具体名称</p></li><li><p>下载指定版本的包<br>npm i 包的具体名称@版本号</p></li><li><p>快速创建包管理配置文件<br>npm init -y</p></li><li><p>根据 package.json 文件中记录的包名称和版本信息全部进行下载<br>npm install/nmp i</p></li><li><p>卸载指定的包<br>npm uninstall 包名称</p></li><li><p>安装开发测试阶段用到的包<br>npm i –save-dev 包名称@版本号/npm i -D 包名称@版本号</p></li><li><p>全局包下载<br>npm i -g 包名称</p></li><li><p>全局包卸载<br>npm uninstall -g 包名称</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>一种传承、<br>一种轮回、<br>两代帝王、<br>一个家庭的悲剧、</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
